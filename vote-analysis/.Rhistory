phone_number %in% sms_treatment$phone_number
)
## Delete total duplicates
print(duplicated(df) %>% sum())#can see around 200 duplicates
df <- distinct(df)#delete them
## Check duplicate seperately in id/phone (to avoid cases where someone has two phone numbers, vice versa)
df$phone_number %>% duplicated() %>% sum()#no duplicate in phone number
df$ai_id %>% duplicated() %>% sum()#no duplicate in id
# first, replace all manual notations of missingness to NA
df[df == "" |
df == "unknown" |
df == "Unknown" |
df == "refused"] <- NA
ff_glimpse(df) #use a handy function to inspect missing values
## Most variables are complete. There's minor missingness around 3% in some variables. We'll further inspect them
df %>% select(race, gender, marital_status) %>% missing_pattern()
df <- df %>% filter(
is.na(race) == FALSE,
is.na(gender) == FALSE,
is.na(marital_status) == FALSE,
is.na(age) == FALSE
)
## Print a quick overview of factors
options(qwraps2_markup = 'markdown')
summary_table(df %>% select(-ai_id,-phone_number,-first_name,-last_name))#exclude factors we are not gonna use in the summary
## binning race
df$race[df$race %in% c("caucasian", "native_american", "other")] <- "other" #i regard these labels as other (instead of existing groups)
## Clean up marital status variable
df$marital_status[df$marital_status == "separaled"] <- "unmarried"
## Bin age variable
## I don't really know the best way to do this
## update: I recode them roughly by quantile value to make sure there are enough people in each category so that anlaysis makes sense
df$age <-
cut(
df$age,
breaks = c(0, 25, 40, 55, Inf),
labels = c("Under 25", "25-39", "40-55", "55+"),
include.lowest = TRUE
)
## recode support outocme because we want to predict against it. Compared with ordinal models, since it has 5 scales, OLS would be good
## here I transform the survey response to a 0-10 scale, hoping it will make the understanding of models easier later
df$support_hopper <- df$support_hopper %>% as.character()
df$support_hopper[df$support_hopper == "strongly oppose"] <- 0
df$support_hopper[df$support_hopper == "somewhat oppose"] <- 2.5
df$support_hopper[df$support_hopper == "neither support nor oppose"] <-
5
df$support_hopper[df$support_hopper == "somewhat support"] <- 7.5
df$support_hopper[df$support_hopper == "strong support"] <- 10
table(df$support_hopper)#inspect result
bal <- glm(sms_treat ~ race + age + marital_status + gender,
data = df,
family = "binomial")
summary(bal)
turnout_model <-
glm(
turnout ~ sms_treat + race + marital_status + gender + age + support_hopper,
data = df,
family = "binomial"
)
summary(turnout_model)
turnout_model_V2 <-
glm(
turnout ~ sms_treat + race + marital_status + gender + age,
data = df,
family = "binomial"
)
summary(turnout_model_V2)
persuasion_model <-
lm(
support_hopper ~ sms_treat + race + marital_status + gender + age + turnout,
data = df
)
summary(persuasion_model)
subgroup_effects <- function(data = df,
subgroup = "subgroup",
treatment = "sms_treat",
outcome = "turnout",
...) {
## choose releveant model as source according to desired outcome, or generate an error message
if (outcome == "turnout") {
model <- turnout_model
} else if (outcome == "persuasion") {
model <- persuasion_model
} else {
print("please specify turnout or persuasion in outcome parameter")
}
## extract table of coefficients and make a data frame
effect_table <-
data.frame(
variable = model$coefficients %>% names(),
effect = model$coefficients %>% as.numeric()
)
## modify variable labels e.g. from "gendermen" to "men"
effect_subgroup <-
effect_table %>% filter(str_detect(variable, subgroup) == TRUE) %>% mutate(variable =
variable %>% str_sub(start = (str_count(subgroup) + 1)))
## add base group whose coefficient is not shown in regression table
subgroup_labels <- df[[subgroup]] %>% unique() %>% as.character()
effect_subgroup <-
effect_subgroup %>% add_row(variable = "base group", effect = 0)
## recalculate coefficient magnitude based on the most negative value for presentation purpose
effect_subgroup <-
effect_subgroup %>% mutate(effect = effect - min(effect_subgroup$effect))
## generate bar plot and relevant notations. pretty much self-explained
race.plot <- ggplot(data = effect_subgroup,
aes(x = variable %>% reorder(effect),
y = effect)) +
geom_bar(stat = "identity",
fill = "skyblue2") +
scale_fill_brewer(palette = "Paired") +
xlab("") +
ylab("") +
ggtitle("Differential treatment effect in subgroups") +
labs(
caption = ifelse(
outcome == "turnout",
"Coefficients from logistics model",
"Coefficients from OLS model"
)
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
theme(text = element_text(size = 15))
return(race.plot)
}
subgroup_effects(subgroup = "gender")
subgroup_effects(subgroup = "race")
# Grace Hopper 2020 SMS analysis
# ----------
# Setup
# ----------
# Codes are formatted with R's automatic formatting
# Check and install package dependencies
packages <- c("tidyverse",
"knitr",
"qwraps2",
"finalfit",
"ggplot2")
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
rm(list = ls())
#wd <- "~/Downloads/Analyst Task 2020/"
wd <- "C:/Users/Tianl/Documents/GitHub/Pet-projects/vote-analysis"
# Read in data
rand_data <- read.csv(file.path(wd, "data", "randomization.csv"))
sms_data <- read.csv(file.path(wd, "data", "text_message_data.csv"))
survey_data <- read.csv(file.path(wd, "data", "survey_data.csv"))
turnout_data <- read.csv(file.path(wd, "data", "turnout_data.csv"))
# Combine turnout data
df <- full_join(rand_data, turnout_data, by = "ai_id")
# Add survey data
# update: replace merge with dplyr::full_join to avoid dropped cases due to no phone follow-up
survey_data$phone_number <- survey_data$phone_number %>% as.factor()
df <- full_join(df, survey_data, by = "phone_number")
# ----------
# SMS Data
# ----------
## We need to make sure everyone was sent the right texts
## I'm confused because there are multiple texts for each person in the dataset. Can you check this?
## update: I filtered out respondents who didnot receive text as planned in experiment. for details see belowã€‚
# Codes below check if individual text message history correspond correctly to his/her treatment/placebo assignment
sms_data_outbound <-
sms_data %>% filter(message_direction == "outbound")#keep only outbound text relevant to the experiment
df_sms <-
full_join(sms_data_outbound,
rand_data %>% select(phone_number, sms_treat))#merge the RAND data for assignment information.
df_sms_unique <-
df_sms %>% spread(key = message_text, value = sms_treat)#reshape the data to be individual-based; generate binary indicator of receiving certain text
names(df_sms_unique)[3:6] <-
c("ptext", "ttext1", "ttext2", "notext")#rename text history indicators. e.g. "ttext2" means "Since the year 2000..."
sms_match <-
df_sms_unique %>% select(-phone_number,-message_direction) %>% table(useNA = "always") %>% as.data.frame() %>% filter(Freq > 0)#summarize frequency of text types
sms_match[order(sms_match$Freq, decreasing = TRUE),]#visualize through a table
## How to read the first row: 12137 people received placebo text under Placebo assignment, and didn't receive any other text
## How to read the third row: 374 people received treatment text1 (push to vote) under Treatment assignment, but didn't received the second message
## We can see around 1000 people did not receive text message correcntly associating with their assignment
# I filter out these respondents to ensure methodological correctness
# correctly placeboed people: received placebo text, and no any other texts
sms_placebo <- df_sms_unique %>% filter(ptext == "Placebo",
is.na(ttext1) == TRUE,
is.na(ttext2) == TRUE,
is.na(notext) == TRUE)
# correctly treated people: received both treatment text, and no any other texts
sms_treatment <- df_sms_unique %>% filter(is.na(ptext) == TRUE,
ttext1 == "Treatment",
ttext1 == "Treatment",
is.na(notext) == TRUE)
# in final dataset, only include those belonging to either of the correct treatment/control group
df <-
df %>% filter(
phone_number %in% sms_placebo$phone_number |
phone_number %in% sms_treatment$phone_number
)
# ----------
# Clean data
# ----------
# Delete duplicates
## Delete total duplicates
print(duplicated(df) %>% sum())#can see around 200 duplicates
df <- distinct(df)#delete them
## Check duplicate seperately in id/phone (to avoid cases where someone has two phone numbers, vice versa)
df$phone_number %>% duplicated() %>% sum()#no duplicate in phone number
df$ai_id %>% duplicated() %>% sum()#no duplicate in id
# Missing value check
# first, replace all manual notations of missingness to NA
df[df == "" |
df == "unknown" |
df == "Unknown" |
df == "refused"] <- NA
ff_glimpse(df) #use a handy function to inspect missing values
## Most variables are complete. There's minor missingness around 3% in some variables. We'll further inspect them
df %>% select(race, gender, marital_status) %>% missing_pattern()
## The missingness looks like by random.
## For simplicity, I assume it's the case and delete them listwise (multiple imputation can be also good)
df <- df %>% filter(
is.na(race) == FALSE,
is.na(gender) == FALSE,
is.na(marital_status) == FALSE,
is.na(age) == FALSE
)
# Recoding factors
## Print a quick overview of factors
options(qwraps2_markup = 'markdown')
summary_table(df %>% select(-ai_id,-phone_number,-first_name,-last_name))#exclude factors we are not gonna use in the summary
## binning race
df$race[df$race %in% c("caucasian", "native_american", "other")] <- "other" #i regard these labels as other (instead of existing groups)
## Clean up marital status variable
df$marital_status[df$marital_status == "separaled"] <- "unmarried"
## Bin age variable
## I don't really know the best way to do this
## update: I recode them roughly by quantile value to make sure there are enough people in each category so that anlaysis makes sense
df$age <-
cut(
df$age,
breaks = c(0, 25, 40, 55, Inf),
labels = c("Under 25", "25-39", "40-55", "55+"),
include.lowest = TRUE
)
## recode support outocme because we want to predict against it. Compared with ordinal models, since it has 5 scales, OLS would be good
## here I transform the survey response to a 0-10 scale, hoping it will make the understanding of models easier later
df$support_hopper <- df$support_hopper %>% as.character()
df$support_hopper[df$support_hopper == "strongly oppose"] <- 0
df$support_hopper[df$support_hopper == "somewhat oppose"] <- 2.5
df$support_hopper[df$support_hopper == "neither support nor oppose"] <-
5
df$support_hopper[df$support_hopper == "somewhat support"] <- 7.5
df$support_hopper[df$support_hopper == "strong support"] <- 10
table(df$support_hopper)#inspect result
# ----------
# Balance
# ----------
## Check for balance across assignment
## We need to double-check treatment assignment balance by age, race, and marital status
## update: why don't we include gender? I added it in the equation as well as ALL models below.
bal <- glm(sms_treat ~ race + age + marital_status + gender,
data = df,
family = "binomial")
summary(bal)
# ----------
# Results
# ----------
# Estimate Turnout
## Control for race, marital status, age (binned), gender, and
## support for hopper
turnout_model <-
glm(
turnout ~ sms_treat + race + marital_status + gender + age + support_hopper,
data = df,
family = "binomial"
)
summary(turnout_model)
## For the previous model, are we particularly interested in the relatoin between support for Hopper and voting?
## If not, deleting it from the equation will add a lot of observations for better inference
turnout_model_V2 <-
glm(
turnout ~ sms_treat + race + marital_status + gender + age,
data = df,
family = "binomial"
)
summary(turnout_model_V2)
# Estimate Persuasion
## Control for race, marital status, age (binned), gender, and
## whether they ended up voting in the election later
persuasion_model <-
lm(
support_hopper ~ sms_treat + race + marital_status + gender + age + turnout,
data = df
)
summary(persuasion_model)
# ----------
# Subgroup Effects
# ----------
## I wonder if the treatment was especially effective at motivating turnout among any subgroups.
## Can you write a function to check a given subgroup for differences in treatment effectiveness?
subgroup_effects <- function(data = df,
subgroup = "subgroup",
treatment = "sms_treat",
outcome = "turnout",
...) {
## choose releveant model as source according to desired outcome, or generate an error message
if (outcome == "turnout") {
model <- turnout_model
} else if (outcome == "persuasion") {
model <- persuasion_model
} else {
print("please specify turnout or persuasion in outcome parameter")
}
## extract table of coefficients and make a data frame
effect_table <-
data.frame(
variable = model$coefficients %>% names(),
effect = model$coefficients %>% as.numeric()
)
## modify variable labels e.g. from "gendermen" to "men"
effect_subgroup <-
effect_table %>% filter(str_detect(variable, subgroup) == TRUE) %>% mutate(variable =
variable %>% str_sub(start = (str_count(subgroup) + 1)))
## add base group whose coefficient is not shown in regression table
subgroup_labels <- df[[subgroup]] %>% unique() %>% as.character()
effect_subgroup <-
effect_subgroup %>% add_row(variable = "base group", effect = 0)
## recalculate coefficient magnitude based on the most negative value for presentation purpose
effect_subgroup <-
effect_subgroup %>% mutate(effect = effect - min(effect_subgroup$effect))
## generate bar plot and relevant notations. pretty much self-explained
race.plot <- ggplot(data = effect_subgroup,
aes(x = variable %>% reorder(effect),
y = effect)) +
geom_bar(stat = "identity",
fill = "skyblue2") +
scale_fill_brewer(palette = "Paired") +
xlab("") +
ylab("") +
ggtitle("Differential treatment effect in subgroups") +
labs(
caption = ifelse(
outcome == "turnout",
"Coefficients from logistics model",
"Coefficients from OLS model"
)
) +
theme_classic() +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
theme(text = element_text(size = 15))
return(race.plot)
}
# Then let's check subgroup effects on turnout by gender & race
subgroup_effects(subgroup = "gender")
subgroup_effects(subgroup = "race")
?purl
purl(make-analysis.rmd)
purl("make-analysis.rmd")
?missing_pattern
unlink('make-analysis_cache', recursive = TRUE)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
cache.lazy = FALSE
)
options(htmltools.dir.version = FALSE)
subgroup_effects(subgroup = "gender")
subgroup_effects(subgroup = "race")
#One more case
subgroup_effects(subgroup = "marital_status", outcome = "persuasion")
unlink('make-analysis_cache', recursive = TRUE)
df$marital_status %>%table()
purl("make-analysis.rmd")
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
source('~/GitHub/Pet-projects/vote-analysis/analyst_task.R', echo=TRUE)
df$attempted%>%table()
12689/21974
missing_glimpse(df)
df$support_hopper%>%table()
1144+136+478+660+731+1144
df$turnout%>%table()
14267+7503
# Grace Hopper 2020 SMS analysis
# ----------
# Setup
# ----------
# Codes are formatted with R's automatic formatting
# Check and install package dependencies
packages <- c("tidyverse",
"finalfit",
"ggplot2")
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
rm(list = ls())
wd <- "~/GitHub/Pet-projects/vote-analysis/"
# Read in data
rand_data <- read.csv(file.path(wd, "data", "randomization.csv"))
sms_data <- read.csv(file.path(wd, "data", "text_message_data.csv"))
survey_data <- read.csv(file.path(wd, "data", "survey_data.csv"))
turnout_data <- read.csv(file.path(wd, "data", "turnout_data.csv"))
# Combine turnout data
df <- full_join(rand_data, turnout_data, by = "ai_id")
# Add survey data
# update: replace merge with dplyr::full_join to avoid dropped cases due to no phone follow-up
survey_data$phone_number <- survey_data$phone_number %>% as.factor()
df <- full_join(df, survey_data, by = "phone_number")
# ----------
# SMS Data
# ----------
## We need to make sure everyone was sent the right texts
## I'm confused because there are multiple texts for each person in the dataset. Can you check this?
## update: I filtered out respondents who didnot receive text as planned in experiment. for details see below???
# Codes below check if individual text message history correspond correctly to his/her treatment/placebo assignment
sms_data_outbound <-
sms_data %>% filter(message_direction == "outbound")#keep only outbound text relevant to the experiment
df_sms <-
full_join(sms_data_outbound,
rand_data %>% select(phone_number, sms_treat))#merge the RAND data for assignment information.
df_sms_unique <-
df_sms %>% spread(key = message_text, value = sms_treat)#reshape the data to be individual-based; generate binary indicator of receiving certain text
names(df_sms_unique)[3:6] <-
c("ptext", "ttext1", "ttext2", "notext")#rename text history indicators. e.g. "ttext2" means "Since the year 2000..."
sms_match <-
df_sms_unique %>% select(-phone_number,-message_direction) %>% table(useNA = "always") %>% as.data.frame() %>% filter(Freq > 0)#summarize frequency of text types
sms_match[order(sms_match$Freq, decreasing = TRUE),]#visualize through a table
## How to read the first row: 12137 people received placebo text under Placebo assignment, and didn't receive any other text
## How to read the third row: 374 people received treatment text1 (push to vote) under Treatment assignment, but didn't received the second message
## We can see around 1000 people did not receive text message correcntly associating with their assignment
# I filter out these respondents to ensure methodological correctness
# correctly placeboed people: received placebo text, and no any other texts
sms_placebo <- df_sms_unique %>% filter(ptext == "Placebo",
is.na(ttext1) == TRUE,
is.na(ttext2) == TRUE,
is.na(notext) == TRUE)
# correctly treated people: received both treatment text, and no any other texts
sms_treatment <- df_sms_unique %>% filter(is.na(ptext) == TRUE,
ttext1 == "Treatment",
ttext1 == "Treatment",
is.na(notext) == TRUE)
# in final dataset, only include those belonging to either of the correct treatment/control group
df <-
df %>% filter(
phone_number %in% sms_placebo$phone_number |
phone_number %in% sms_treatment$phone_number
)
# ----------
# Clean data
# ----------
# Delete duplicates
## Delete total duplicates
print(duplicated(df) %>% sum())#can see around 200 duplicates
df <- distinct(df)#delete them
## Check duplicate seperately in id/phone (to avoid cases where someone has two phone numbers, vice versa)
df$phone_number %>% duplicated() %>% sum()#no duplicate in phone number
df$ai_id %>% duplicated() %>% sum()#no duplicate in id
# Missing value check
# first, replace all manual notations of missingness to NA
df[df == "" |
df == "unknown" |
df == "Unknown" |
df == "refused"] <- NA
ff_glimpse(df) #use a handy function to inspect missing values
## Most variables are complete. There's minor missingness around 3% in some variables. We'll further inspect them
df %>% select(race, gender, marital_status) %>% missing_pattern()
## The missingness looks like by random.
## For simplicity, I assume it's the case and delete them listwise (multiple imputation can be also good)
df <- df %>% filter(
is.na(race) == FALSE,
is.na(gender) == FALSE,
is.na(marital_status) == FALSE,
is.na(age) == FALSE
)
# Recoding factors
## Print a quick overview of factors
str(df)#exclude factors we are not gonna use in the summary
## binning race
df$race[df$race %in% c("caucasian", "native_american", "other")] <- "other" #i regard these labels as other (instead of existing groups)
## Clean up marital status variable
df$marital_status[df$marital_status == "separated"] <- "unmarried"
## Bin age variable
## I don't really know the best way to do this
## update: I recode them roughly by quantile value to make sure there are enough people in each category so that anlaysis makes sense
df$age <-
cut(
df$age,
breaks = c(0, 25, 40, 55, Inf),
labels = c("Under 25", "25-39", "40-55", "55+"),
include.lowest = TRUE
)
## recode support outocme because we want to predict against it. Compared with ordinal models, since it has 5 scales, OLS would be good
## here I transform the survey response to a 0-10 scale, hoping it will make the understanding of models easier later
df$support_hopper <- df$support_hopper %>% as.character()
df$support_hopper_cat <- df$support_hopper
View(df)
