compensation_raw <-
read.csv("Data_storage/agent_cost/compensation.csv",
stringsAsFactors = FALSE)
direct_hiring_raw <-
read.csv("Data_storage/agent_cost/direct_hiring.csv",
stringsAsFactors = FALSE)
cost_full <-
left_join(cost_raw, compensation_raw %>% select(name, rate), by = "name")
direct_hiring <-
left_join(direct_hiring_raw, compensation_raw %>% select(name, rate), by = "name")
#calculate total cost for a class in post training period
cost_post<-cost_full%>%filter(period%in%c("training2.5wk","post-class"))
cost_training_daily<-cost_post%>%filter(period=="training2.5wk")%>%mutate(cost=hours*rate)
cost_training_daily<-cost_training_daily$cost%>%sum()/12
cost_post_daily<-cost_post%>%filter(period=="post-class")%>%mutate(cost=hours*rate)
cost_post_daily<-cost_post_daily$cost%>%sum()/90
cost<-cost_full%>%filter(period%in%c("onboarding","physical"))
#construct workday variable
dta_merged$workday <- NA
for (i in 1:nrow(dta_merged)) {
dta_merged$workday[i] <- sum(!weekdays(
seq(
dta_merged$hire_date[i] %>% as.Date(),
dta_merged$termination_date[i] %>% as.Date(),
"days"
)
) %in% c("Saturday", "Sunday"))
}
#calculate class cost for individuals
dta_merged_new<-NULL
classes<-unique(dta_merged[c("hire_date", "center")])%>%as.data.frame()
for (i in 1:nrow(classes)) {
class <- dta_merged %>% filter(hire_date == classes$hire_date[i],
center == classes$center[i])
class$group[is.na(class$group) == TRUE] <- "Missing"
cost_class <- cost
size <- max(nrow(class),8)
#Onboarding, training and post-training cost
cost_class <-
cost_class %>% mutate(cost = (rate * hours) + variable * rate * hours * (size - 1))
cost_class_2 <-
cost_class %>% group_by(period) %>% summarise(sum(cost, na.rm = TRUE))
cost_training <-
sum(cost_class_2$`sum(cost, na.rm = TRUE)`, na.rm = TRUE)
#TCC and ECC
if (names(which.max(table(class$hire_source))) == "TCC Direct Hires") {
#Direct hiring cost
direct_hiring_class <-
direct_hiring %>% mutate(cost = rate * hours)
cost_hiring <-
sum(direct_hiring_class$cost, na.rm = TRUE)
} else {
#No agency hire cost
cost_hiring <- 0
}
#Diffrentiate between direct hired class and agency hired class
class <- class %>% mutate(
class_cost_total = (cost_training + cost_hiring),
class_size = size,
cost_training_daily = cost_training_daily/ size,
cost_post_daily = cost_post_daily/ size,
class_cost = class_cost_total / size
)
dta_merged_new <- rbind(dta_merged_new, class)
}
save(dta_merged_new,file = "Data_storage/dta_processed/dta_merged_new.RData")
save(dta_merged_new,
file="C:\\Users\\Tianl\\Documents\\GitHub\\14WesTech_TCC\\TCC_consulting_project\\Dashboard\\dta_processed\\dta_merged_new.RData")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 9,
fig.width = 15,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:\\Users\\Tianl\\Box\\TCC_Project_Langyi")
options(htmltools.dir.version = FALSE)
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#fix paths and system parameters
tokens<-read.csv("Data_storage\\tokens.csv")
setwd("C:\\Users\\Administrator\\Box\\TCC_Project_Langyi")#Change accordingly when run at another device
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 9,
fig.width = 15,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:\\Users\\Tianl\\Box\\TCC_Project_Langyi")
options(htmltools.dir.version = FALSE)
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#fix paths and system parameters
tokens<-read.csv("Data_storage\\tokens.csv")
#setwd("C:\\Users\\Administrator\\Box\\TCC_Project_Langyi")#Change accordingly when run at another device
Sys.setenv(plotly_username = tokens$key[tokens$tokenname=="plotly_username"],
plotly_api_key = tokens$key[tokens$tokenname=="plotly_api_key"],
AWS_ACCESS_KEY_ID = tokens$key[tokens$tokenname=="AWS_ACCESS_KEY_ID"],
AWS_SECRET_ACCESS_KEY = tokens$key[tokens$tokenname=="AWS_ACCESS_KEY_ID"],
AWS_DEFAULT_REGION = "us-east-2")
#load packages.
packages <- c(
"devtools",
"shiny",
"here",
"pkgnet",
"praise",
"rsconnect",
#"readxl",
#"excel.link",
#"tidyxl",
#"rJava",
#"xlsx",
#"XLConnect",
"tidyverse",
"stringr",
"purrr",
"data.table",
"DT",
"knitr",
"ggplot2",
"plotly",
"widgetframe",
"gridExtra",
"lubridate",
"ggmap",
"FactoMineR",
"factoextra",
"RColorBrewer",
"tseries",
"glmnet",
"randomForest",
"jtools",
"ggstance",
"ggraph",
"igraph"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
dta_processed_list <-
list.files(
"Data_storage/dta_processed",
pattern = "*.RData",
full.names = TRUE
)
for (i in dta_processed_list){
load(i)
}
pie_cohort <-
dta_merged[dta_merged$terminated == FALSE, ] %>% select(name, hire_date)
pie_cohort$hire_date <-
pie_cohort$hire_date %>% as.Date() %>% cut("year") %>% as.character() %>%
str_extract("^[:digit:]{4}")
pie_cohort <- pie_cohort %>% group_by(hire_date) %>% summarise(freq = n())
pir_cohort_caption <- paste(
"Current size ",
dta_merged %>% filter(terminated == FALSE) %>% nrow(),
", ",
dta_merged %>% filter(
hire_date %>% as.Date() >= "2018-01-01",
hire_date %>% as.Date() < "2019-01-01"
) %>% nrow(),
" hired 2018, ",
dta_merged %>% filter(hire_date %>% as.Date() >= "2019-01-01") %>%
nrow(),
" hired 2019",
sep = ""
)
plot_pie_cohort <- ggplot(pie_cohort,
aes(x = "",
y = freq,
fill = hire_date)) +
geom_bar(stat = "identity",
color = "seashell4") +
geom_text(
aes(label = paste(freq)),
color = "gray16",
position = position_stack(vjust = 0.5),
size = 5.5
) +
coord_polar(theta = "y", start = 0) +
scale_fill_brewer(palette = "Pastel1") +
labs(caption = pir_cohort_caption %>% paste(),
fill = "Year Hired") +
theme_void() +
theme(text = element_text(size = 20))
plot_pie_cohort
tenure_by_group <-
dta_merged[dta_merged$group %>% is.na() == FALSE &
dta_merged$group != "Training", ]
tenure_by_group <-
tenure_by_group %>% group_by(group, terminated) %>% summarise(
num = n(),
qa_mean =
mean(qa_mean, na.rm = TRUE),
tenure =
mean(tenure, na.rm = TRUE)
)
tenure_by_group$num[tenure_by_group$terminated == TRUE] <-
(-1 * tenure_by_group$num[tenure_by_group$terminated == TRUE])
tenure_by_group$terminated[tenure_by_group$terminated == TRUE] <-
"Terminated"
tenure_by_group$terminated[tenure_by_group$terminated == FALSE] <-
"Active"
#Plot pyramid plot
plot_tenure_group <- ggplot(tenure_by_group,
aes(
x = group %>% reorder(num),
y = num,
fill = terminated
)) +
geom_bar(data = filter(tenure_by_group, terminated == "Terminated"),
stat = "identity") +
geom_bar(data = filter(tenure_by_group, terminated == "Active"),
stat = "identity") +
scale_y_continuous(breaks = seq(-50, 20, 5),
labels = c(seq(50, 0,-5),
seq(5, 20, 5))) +
scale_fill_brewer(palette = "Dark2", direction = 1) +
coord_flip(expand = TRUE) +
xlab("") +
ylab("") +
labs(fill = "Status") +
theme_classic() +
theme(text = element_text(size = 20))
plot_tenure_group
dta_lm_old <- dta_merged %>% filter(hire_date %>% as.Date() < "2018-01-01")
lm_old <-
lm(tenure ~ age + gender + commute_time + qa_mean_w4 + min + gap + supe,
data = dta_lm_old)
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 10,
fig.width = 18,
figure.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
#knitr::opts_knit$set(root.dir = "C:\\Users\\Tianl\\Documents\\GitHub\\First-Street-Foundation")
options(htmltools.dir.version = FALSE)
cbind(seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),
seq(10,1000,10),)%>%DT::datatable(width=100,height = 100)
?datatable
?datatable
install.packages("DT")
install.packages("DT")
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 7,
fig.width = 15,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Administrator/Documents/GitHub/Bank-Marketing-Machine-Learning")
options(htmltools.dir.version = FALSE)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 7,
fig.width = 15,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Administrator/Documents/GitHub/Bank-Marketing-Machine-Learning")
options(htmltools.dir.version = FALSE)
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"devtools",
"shiny",
"here",
"pkgnet",
"praise",
"rsconnect",
#"readxl",
#"excel.link",
#"tidyxl",
#"rJava",
#"xlsx",
#"XLConnect",
"tidyverse",
"stringr",
"purrr",
"data.table",
"DT",
"knitr",
"ggplot2",
"plotly",
"widgetframe",
"gridExtra",
"lubridate",
"ggmap",
"FactoMineR",
"factoextra",
"RColorBrewer",
"tseries",
"glmnet",
"randomForest",
"jtools",
"ggstance",
"ggraph",
"igraph"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
knitr::opts_knit$set(root.dir = "C:/Users/Administrator/Documents/GitHub/Bank-Marketing-Machine-Learning")
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 7,
fig.width = 15,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning")
options(htmltools.dir.version = FALSE)
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"devtools",
"shiny",
"here",
"pkgnet",
"praise",
"rsconnect",
#"readxl",
#"excel.link",
#"tidyxl",
#"rJava",
#"xlsx",
#"XLConnect",
"tidyverse",
"stringr",
"purrr",
"data.table",
"DT",
"knitr",
"ggplot2",
"plotly",
"widgetframe",
"gridExtra",
"lubridate",
"ggmap",
"FactoMineR",
"factoextra",
"RColorBrewer",
"tseries",
"glmnet",
"randomForest",
"jtools",
"ggstance",
"ggraph",
"igraph"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning")
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
dta <- read.csv("Casestudydata.csv", stringsAsFactors=FALSE)
dta <- read.csv("Casestudydata.csv")
dta <- read.csv("Casestudydata.csv")
read.csv("Casestudydata.csv")
read.csv("Casestudydata.csv")
dta <- read.csv("Casestudydata.csv")
View(dta)
dta <- read.csv("Casestudydata.csv")
View(dta)
sapply(dta, class)
