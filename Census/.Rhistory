}
}
summary.stats<-cbind(summary_table(dta%>%filter(income=="<=50K")),
summary_table(dta%>%filter(income==">50K"))
)
summary.stats
library("FactoMineR")
library("factoextra")
dta_famd <-
dta %>%  select_if(is.factor) %>% filter(!race %in% c("Other"),!native.country %in%
c("Not matched")) %>% select(sex,
education.group,
race,
martial.status,
income,
native.country,
age.group,
hours.group,
profit.group,
workingclass
)
dta$education.group<-dta$education.num%>%cut(c(-Inf,5,9,12,13,Inf),
labels = c("middle school",
"high school",
"associate",
"bachelor",
"master"
))
dta$age.group<-dta$age%>%cut(c(-Inf,25,40,55,Inf),
labels = c("<25 yrs old",
"25-40 yrs old",
"40-55 yrs old",
">55 yrs old"))
dta$hours.group<-dta$hours.per.week%>%cut(c(-Inf,39,40,Inf),
labels = c("work undertime",
"work regular hours",
"work overtime"),)
dta$profit.group<-dta$profit%>%cut(c(-Inf,-1,0,Inf),
labels = c("has investment",
"no investment",
"has investment"))
library("FactoMineR")
library("factoextra")
dta_famd <-
dta %>%  select_if(is.factor) %>% filter(!race %in% c("Other"),!native.country %in%
c("Not matched")) %>% select(sex,
education.group,
race,
martial.status,
income,
native.country,
age.group,
hours.group,
profit.group,
workingclass
)
res.famd <- FAMD (dta_famd,
ncp = 2,
ind.sup = NULL,
graph = FALSE)
quali.var <- get_famd_var(res.famd, "quali.var")
fviz_famd_var(
res.famd,
"quali.var",
repel = TRUE,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
train<-dta%>%filter(set=="train")%>%select(-set)
train<-dta%>%filter(set=="train")%>%select(-set)
test<-dta%>%filter(set=="test")%>%select(-set)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("parsnip")
library(parsnip)
formulat.1<-formula(income ~
age+
workingclass+
education.num+
martial.status+
occupation+
relationship+
race+
sex+
hours.per.week+
native.country+
profit)
recipe_simple <- function(dataset) {
recipe(formulat.1,
data = dataset) %>%
step_string2factor(all_nominal(), -all_outcomes()) %>%
prep(data = dataset)
}
recipe_prepped <- recipe_simple(dataset = train)
library(tidymodels)
install.packages("ggplot2")
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
library(tidymodels)
library(tidymodels)
install.packages(c("caret", "data.table", "digest", "htmltools", "Matrix", "mvtnorm", "purrr", "Rcpp", "rlang", "stringi", "zoo"))
library(tidymodels)
library(tidymodels)
install.packages(c("caret", "data.table", "htmltools", "purrr"))
library(tidymodels)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
options(htmltools.dir.version = FALSE)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
packages <- c(
"tidyverse",
"knitr",
"ggplot2",
"gridExtra",
"FactoMineR",
"factoextra",
"RColorBrewer",
"countrycode",
"qwraps2",
"sjstats",
"finalfit",
"fpc",
"tidymodels",
"parsnip"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
select<-dplyr::select
#import raw data
train <- read.csv("adult.data.csv",
header = FALSE,
stringsAsFactors = FALSE)
test <- read.csv(
"adult.test.csv",
header = FALSE,
skip = 1,
stringsAsFactors = FALSE
)
#combine train and test together
dta <- rbind(cbind(set = rep("train", nrow(train)),
train),
cbind(set = rep("test", nrow(test)),
test))
#assign variable names
names(dta)[-1] <- c(
"age",
"workingclass",
"fnlwgt",
"education",
"education.num",
"martial.status",
"occupation",
"relationship",
"race",
"sex",
"capital.gain",
"capital.loss",
"hours.per.week",
"native.country",
"income"
)
str(dta)
#the weighting should have nothing to do with prediction
dta <- dta %>% select(-fnlwgt)
#trim the white space
dta <- dta %>% mutate_if(is.character, str_trim)
#recode ? and unknown to NA
dta <- na_if(dta, "?")
#print a summary
options(qwraps2_markup = "markdown")
summary_table(dta)
dta$native.country[!dta$native.country %in% c("United-States")] <-
countrycode(dta$native.country[!dta$native.country %in% c("United-States")],
"country.name",
"continent",
nomatch = "Not matched")
dta <-
dta %>% mutate(profit = capital.gain - capital.loss) %>% select(-capital.gain,-capital.loss)
#recode income
dta$income[dta$income == "<=50K."] <- "<=50K"
dta$income[dta$income == ">50K."] <- ">50K"
dta$income[dta$income == "<=50K"] <- "Income <= 50K"
dta$income[dta$income == ">50K"] <- "Income > 50K"
for (i in names(dta %>% select(-income))) {
if (class(dta[[i]]) == "character") {
i %>% print()
cramer(as.formula(paste("income~", i, sep = "")), dta) %>% print()
table(dta[[i]], dta$income) %>% print()
}
}
#recode workingclass
dta$workingclass[dta$workingclass %in% c("Federal-gov", "Local-gov", "State-gov")] <-
"Government"
dta$workingclass[dta$workingclass %in% c("Self-emp-inc", "Self-emp-not-inc")] <-
"Self-employed"
dta$workingclass[dta$workingclass %in% c("Never-worked", "Without-pay")] <-
"No work/pay"
#recode martial.status
dta$martial.status[dta$martial.status %in% c("Married-AF-spouse", "Married-civ-spouse")] <-
"Married"
dta$martial.status[dta$martial.status %in% c("Divorced", "Married-spouse-absent", "Separated", "Widowed")] <-
"post-marriage"
#Race
dta$race[dta$race %in% c("Amer-Indian-Eskimo", "Asian-Pac-Islander")] <-
"Other"
#Too many categories in occupation and no apparent good way of recoding, leave it as it is
ff_glimpse(dta)
dta %>% select(workingclass, occupation, native.country) %>% missing_pattern()
dta %>% missing_compare("workingclass",
c("age", "education.num", "profit"))
dta$workingclass[is.na(dta$workingclass) == TRUE] <- "missing"
dta$occupation[is.na(dta$occupation) == TRUE] <- "missing"
#recode character to factor
for (i in names(dta)) {
if (class(dta[[i]]) == "character") {
dta[[i]] <- dta[[i]] %>% as.factor()
}
}
summary.stats <-
cbind(summary_table(dta %>% filter(income == "Income <= 50K")),
summary_table(dta %>% filter(income == "Income > 50K")))
summary.stats
dta$education.group <- dta$education.num %>% cut(
c(-Inf, 5, 9, 12, 13, Inf),
labels = c(
"Middle school",
"High school",
"Associates",
"Undergrad education",
"Graduate education"
)
)
dta$age.group <- dta$age %>% cut(
c(-Inf, 25, 40, 55, Inf),
labels = c("<25 yrs old",
"25-40 yrs old",
"40-55 yrs old",
">55 yrs old")
)
dta$hours.group <- dta$hours.per.week %>% cut(c(-Inf, 39, 40, Inf),
labels = c("Work undertime",
"Work regular hours",
"Work overtime"),
)
dta$profit.group <- dta$profit %>% cut(
c(-Inf, -1, 0, Inf),
labels = c(
"Has capital investment",
"No investment",
"Has capital investment"
)
)
#construct summary statistics by education, profit, martial status etc. to set up ggplot data infrastructure
education.plot <- ggplot(
data = dta %>% group_by(education.group, income) %>% summarise(percent =
n() * 100 / nrow(dta)) %>% mutate(group = str_c(education.group, " and income", income)),
aes(x = education.group,
y = percent,
fill = income)
)
profit.plot <- ggplot(
data = dta %>% group_by(profit.group, income) %>% summarise(percent =
n() * 100 / nrow(dta)) %>% mutate(group = str_c(profit.group, " and income", income)),
aes(x = profit.group,
y = percent,
fill = income)
)
martial.status.plot <- ggplot(
data = dta %>% group_by(martial.status, income) %>% summarise(percent =
n() * 100 / nrow(dta)) %>% mutate(group = str_c(martial.status, " and income", income)),
aes(x = martial.status,
y = percent,
fill = income)
)
race.plot <- ggplot(
data = dta %>% group_by(race, income) %>% summarise(percent =
n() * 100 / nrow(dta)) %>% mutate(group = str_c(race, " and income", income)),
aes(x = race,
y = percent,
fill = income)
)
#my function to make the plots and make them prettier
formatting <- function(plot, legend = FALSE) {
plot <- plot +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Paired") +
xlab("") +
ylab("") +
labs(fill = "Income")  +
theme_classic() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
if (legend == FALSE) {
plot <- plot +
theme(legend.position = "none")
}
return(plot)
}
#combine the 4 plots together in 1 page
var.plot <- grid.arrange(
race.plot %>% formatting(),
education.plot %>% formatting(),
martial.status.plot %>% formatting(),
profit.plot %>% formatting(legend = TRUE),
top = "Who tend to have high income? Some examples.",
left = "Percentage"
)
var.plot
#select the necessary features into MCA.
#All variables but occupation are included. Too many categories in occupation will make the plot unreadable.
dta_famd <-
dta %>%  filter(!race %in% c("Other"),!native.country %in% c("Not matched")) %>% select(#get ride of a few outliers
income,
sex,
education.group,
race,
martial.status,
native.country,
age.group,
hours.group,
profit.group,
workingclass
)
#Construct the MCA
res.famd <- FAMD (dta_famd,
ncp = 2,#This MCA is not for clustering purpose, so we just use 2 components and visualize them on a plot
graph = FALSE)
#build the visualization of 2 principal components
quali.var <- get_famd_var(res.famd, "quali.var")
mca.plot<-fviz_famd_var(
res.famd,
"quali.var",
repel = TRUE,
col.var = "black"
) +
theme_void()+
xlab("") +
ylab("") +
labs(title = "A more comprehensive view",
subtitle = "Groups on the left tend to have lower income, and groups on the right tend to have higher income",
caption = "From Multiple Correspondence Analysis (MCA) result")+
theme(
panel.background = element_rect(fill = "lightyellow1"))
mca.plot
dta_modeling <- dta %>% select(
set,
income,
age,
workingclass,
education.num,
martial.status,
occupation,
relationship,
race,
sex,
hours.per.week,
native.country,
profit
)
train <- dta_modeling %>% filter(set == "train") %>% select(-set)
test <- dta_modeling %>% filter(set == "test") %>% select(-set)
#build formula
formula.1<-formula(income ~ .)
#modeling framework
recipe_simple <- function(dataset) {
recipe(formula.1,
data = dataset) %>%
step_string2factor(all_nominal(), -all_outcomes()) %>%
prep(data = dataset)
}
#only use train set for recipe to prevent information leakage between train and test
recipe_prepped <- recipe_simple(dataset = train)
#conduct the preprocessing
train_baked <- bake(recipe_prepped, new_data = train)
test_baked  <- bake(recipe_prepped, new_data = test)
logistic_glm <-
logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(formula.1, data = train_baked)
summary_logit<-logistic_glm$fit%>%summary()
coefficients_table<-summary_logit$coefficients%>%as.data.frame()
coefficients_table<-bind_cols(var=rownames(coefficients_table),
coef=coefficients_table$Estimate*100,
p=coefficients_table$`Pr(>|z|)`
)%>%as.data.frame()%>%mutate(coef=coef%>%round(2))
coefficients_table<-coefficients_table[order(coefficients_table$coef,decreasing = TRUE),]
coef.plot <- ggplot(
data = coefficients_table%>%head(15)%>%filter(var!="occupationmissing"),
aes(x = var%>% reorder(coef),
y = coef)
) +
geom_bar(stat = "identity",
fill = "darkseagreen3") +
xlab("") +
ylab("") +
labs(fill = "Income")  +
theme_classic() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
coef.plot
set.seed(1)
dta_famd_1 <-
dta %>%filter(set=="test") %>%select(
income,
sex,
education.num,
race,
martial.status,
relationship,
native.country,
age,
hours.per.week,
profit,
workingclass,
occupation
)%>%sample_frac(0.1)
res.famd_1 <- FAMD (dta_famd_1,
ncp = 5,
sup.var = 1,
ind.sup = NULL,
graph = FALSE)
km_input<-res.famd_1$ind$coord%>%as.data.frame()
cluster_test <- function(num, nboot) {
set.seed(1)
class_pamk <- fpc::clusterboot(
km_input,
B = nboot,
distances = FALSE,
bootmethod = "boot",
multipleboot = TRUE,
dissolution = 0.5,
recover = 0.7,
count = FALSE,
showplots = FALSE,
clustermethod = fpc::pamkCBI,
k = num,
criterion = "asw",
usepam = TRUE
)
class_pamk %>% print()
return(class_pamk$result$result)
}
load("pamk_mod.RData")
