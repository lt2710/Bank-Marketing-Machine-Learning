library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"GGally",
"caret",
"corrplot",
"data.table",
"pROC",
"tidyverse",
"stringr",
"knitr",
"ggplot2",
"gridExtra",
"FactoMineR",
"factoextra",
"RColorBrewer"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
select<-dplyr::select
View(theme_simplemap)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"GGally",
"caret",
"corrplot",
"data.table",
"pROC",
"tidyverse",
"stringr",
"knitr",
"ggplot2",
"gridExtra",
"FactoMineR",
"factoextra",
"RColorBrewer"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
select<-dplyr::select
#import raw data
train <- read.csv("adult.data.csv",
header = FALSE,
stringsAsFactors = FALSE)
test <- read.csv("adult.test.csv",
header = FALSE,
skip = 1,
stringsAsFactors = FALSE)
#combine train and test together
dta <- rbind(cbind(set = rep("train", nrow(train)),
train),
cbind(set = rep("test", nrow(test)),
test))
#assign variable names
names(dta)[-1] <- c(
"age",
"workingclass",
"fnlwgt",
"education",
"education.num",
"martial.status",
"occupation",
"relationship",
"race",
"sex",
"capital.gain",
"capital.loss",
"hours.per.week",
"native.country",
"income"
)
str(dta)
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"GGally",
"caret",
"corrplot",
"data.table",
"pROC",
"tidyverse",
"stringr",
"knitr",
"ggplot2",
"gridExtra",
"FactoMineR",
"factoextra",
"RColorBrewer"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
select<-dplyr::select
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
#set up theme map
theme_simplemap <- function(base_size = 9,
base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
panel.spacing = unit(0, "lines"),
plot.background = element_blank(),
legend.position = "none"
)
}
#load packages.
packages <- c(
"GGally",
"caret",
"corrplot",
"data.table",
"pROC",
"tidyverse",
"stringr",
"knitr",
"ggplot2",
"gridExtra",
"FactoMineR",
"factoextra",
"RColorBrewer"
)
packages <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
}
)
select<-dplyr::select
#import raw data
train <- read.csv("adult.data.csv",
header = FALSE,
stringsAsFactors = FALSE)
test <- read.csv("adult.test.csv",
header = FALSE,
skip = 1,
stringsAsFactors = FALSE)
#combine train and test together
dta <- rbind(cbind(set = rep("train", nrow(train)),
train),
cbind(set = rep("test", nrow(test)),
test))
#assign variable names
names(dta)[-1] <- c(
"age",
"workingclass",
"fnlwgt",
"education",
"education.num",
"martial.status",
"occupation",
"relationship",
"race",
"sex",
"capital.gain",
"capital.loss",
"hours.per.week",
"native.country",
"income"
)
str(dta)
#the weighting should have nothing to do with prediction
dta<-dta%>%select(-fnlwgt)
#trim the white space
dta <- dta %>% mutate_if(is.character, str_trim)
#recode ? and unknown to NA
dta<-na_if(dta,"?")
#print a summary
library(qwraps2)
options(qwraps2_markup = "markdown")
summary.stats<-summary_table(dta)
summary.stats
dta$relationship[dta$relationship%in%c("Husband","Wife")]<-"Married"
library(countrycode)
library(sjstats)
dta$native.country[!dta$native.country %in% c("United-States")] <-
countrycode(dta$native.country[!dta$native.country %in% c("United-States")],
"country.name",
"continent",
nomatch = "Not matched")
dta<-dta%>%mutate(profit=capital.gain-capital.loss)%>%select(-capital.gain,
-capital.loss)
#recode income
dta$income[dta$income=="<=50K."]<-"<=50K"
dta$income[dta$income==">50K."]<-">50K"
library(sjstats)
#recode character to factor
for (i in names(dta%>%select(-income))){
if (class(dta[[i]])=="character"){
i%>%print()
cramer(as.formula(paste("income~",i,sep = "")),dta)%>%print()
table(dta[[i]], dta$income)%>%print()
}
}
#recode workingclass
dta$workingclass[dta$workingclass%in%c("Federal-gov","Local-gov","State-gov")]<-"Government"
dta$workingclass[dta$workingclass%in%c("Self-emp-inc","Self-emp-not-inc")]<-"Self-employed"
dta$workingclass[dta$workingclass%in%c("Never-worked","Without-pay")]<-"No work/pay"
#recode martial.status
dta$martial.status[dta$martial.status%in%c("Married-AF-spouse","Married-civ-spouse")]<-"Married"
dta$martial.status[dta$martial.status%in%c("Divorced","Married-spouse-absent","Separated","Widowed")]<-"post-marriage"
#Race
dta$race[dta$race%in%c("Amer-Indian-Eskimo","Asian-Pac-Islander")]<-"Other"
library(finalfit)
ff_glimpse(dta)
dta %>% select(workingclass, occupation, native.country) %>% missing_pattern()
dta %>% missing_compare("workingclass",
c("age", "education.num", "profit"))
dta$workingclass[is.na(dta$workingclass)==TRUE]<-"missing"
dta$occupation[is.na(dta$occupation)==TRUE]<-"missing"
#recode character to factor
for (i in names(dta)){
if (class(dta[[i]])=="character"){
dta[[i]]<-dta[[i]]%>%as.factor()
}
}
summary.stats<-cbind(summary_table(dta%>%filter(income=="<=50K")),
summary_table(dta%>%filter(income==">50K"))
)
summary.stats
library("FactoMineR")
library("factoextra")
dta_famd <-
dta %>%  select_if(is.factor) %>% filter(!race %in% c("Other"),!native.country %in%
c("Not matched")) %>% select(sex,
education.group,
race,
martial.status,
income,
native.country,
age.group,
hours.group,
profit.group,
workingclass
)
dta$education.group<-dta$education.num%>%cut(c(-Inf,5,9,12,13,Inf),
labels = c("middle school",
"high school",
"associate",
"bachelor",
"master"
))
dta$age.group<-dta$age%>%cut(c(-Inf,25,40,55,Inf),
labels = c("<25 yrs old",
"25-40 yrs old",
"40-55 yrs old",
">55 yrs old"))
dta$hours.group<-dta$hours.per.week%>%cut(c(-Inf,39,40,Inf),
labels = c("work undertime",
"work regular hours",
"work overtime"),)
dta$profit.group<-dta$profit%>%cut(c(-Inf,-1,0,Inf),
labels = c("has investment",
"no investment",
"has investment"))
library("FactoMineR")
library("factoextra")
dta_famd <-
dta %>%  select_if(is.factor) %>% filter(!race %in% c("Other"),!native.country %in%
c("Not matched")) %>% select(sex,
education.group,
race,
martial.status,
income,
native.country,
age.group,
hours.group,
profit.group,
workingclass
)
res.famd <- FAMD (dta_famd,
ncp = 2,
ind.sup = NULL,
graph = FALSE)
quali.var <- get_famd_var(res.famd, "quali.var")
fviz_famd_var(
res.famd,
"quali.var",
repel = TRUE,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
)
train<-dta%>%filter(set=="train")%>%select(-set)
train<-dta%>%filter(set=="train")%>%select(-set)
test<-dta%>%filter(set=="test")%>%select(-set)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("parsnip")
library(parsnip)
formulat.1<-formula(income ~
age+
workingclass+
education.num+
martial.status+
occupation+
relationship+
race+
sex+
hours.per.week+
native.country+
profit)
recipe_simple <- function(dataset) {
recipe(formulat.1,
data = dataset) %>%
step_string2factor(all_nominal(), -all_outcomes()) %>%
prep(data = dataset)
}
recipe_prepped <- recipe_simple(dataset = train)
library(tidymodels)
install.packages("ggplot2")
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "caret", "classInt", "cli", "covr", "curl", "data.table", "DBI", "dendextend", "devtools", "digest", "DT", "e1071", "ellipsis", "factoextra", "FactoMineR", "fansi", "farver", "flextable", "gdtools", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggsignif", "ggstance", "glmnet", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huxtable", "igraph", "jpeg", "kernlab", "knitr", "lambda.r", "later", "latticeExtra", "leaflet", "maptools", "markdown", "Matrix", "mime", "modelr", "mvtnorm", "officer", "openxlsx", "ordinal", "pillar", "pingr", "pkgbuild", "pkgconfig", "plotly", "plyr", "prabclus", "prettyunits", "prodlim", "promises", "purrr", "quadprog", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "rgdal", "rgeos", "RgoogleMaps", "rlang", "rmarkdown", "roxygen2", "rsconnect", "rvest", "scales", "selectr", "servr", "sf", "shiny", "sjmisc", "sp", "SparseM", "stringi", "sys", "testthat", "tidyverse", "tinytex", "tmap", "TraMineR", "TTR", "units", "vctrs", "visNetwork", "whisker", "xaringan", "xfun", "zip", "zoo"))
#Set up default knitr chunk options
library("knitr")
knitr::opts_chunk$set(
echo = FALSE,
eval = TRUE,
message = FALSE,
warning = FALSE,
fig.height = 5,
fig.width = 12,
fig.align = "center",
cache = TRUE,
cache.lazy = FALSE
)
knitr::opts_knit$set(root.dir = "C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
options(htmltools.dir.version = FALSE)
setwd("C:/Users/Tianl/Documents/GitHub/Bank-Marketing-Machine-Learning/Census")
library(tidymodels)
library(tidymodels)
install.packages(c("caret", "data.table", "digest", "htmltools", "Matrix", "mvtnorm", "purrr", "Rcpp", "rlang", "stringi", "zoo"))
library(tidymodels)
library(tidymodels)
install.packages(c("caret", "data.table", "htmltools", "purrr"))
library(tidymodels)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
